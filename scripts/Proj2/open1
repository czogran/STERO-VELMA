#!/usr/bin/env python
 
import roslib;     roslib.load_manifest('velma_task_cs_ros_interface')
 
import rospy
import math
import PyKDL
 
from velma_common import *
from rcprg_planner import *
from rcprg_ros_utils import exitError
from grip import *
from move_joint import *
from move_vector import *

def exitError(code):
     if code == 0:
         print "OK"
         exit(0)
     print "ERROR:", code
     exit(code)
 

if __name__ == "__main__":
     # define some configurations
    print "VELMA"
    rospy.init_node('start')
 
    rospy.sleep(0.5)
    velma = VelmaInterface()
    velma.waitForInit()

    if not velma.waitForInit(timeout_s=10.0):
         print "Could not initialize VelmaInterface\n"


    planner = Planner(velma.maxJointTrajLen())
    planner.waitForInit()
    oml = OctomapListener("/octomap_binary")
    rospy.sleep(1.0)
    octomap = oml.getOctomap(timeout_s=5.0)
    planner.processWorld(octomap)

    print "Enabling motors..."
    if velma.enableMotors() != 0:
         exitError(2)
 
    rospy.sleep(0.5)
 
    diag = velma.getCoreCsDiag()
    if not diag.motorsReady():
         print "Motors must be homed and ready to use for this test."
         exitError(1)


   
    #SWITCH TO CART IMP MODE
    print "Switch to cart_imp mode (no trajectory)..."
    if not velma.moveCartImpRightCurrentPos(start_time=0.2):
         exitError(8)
    if velma.waitForEffectorRight() != 0:
         exitError(9)
 
    rospy.sleep(0.5)
    diag = velma.getCoreCsDiag()
    if not diag.inStateCartImp():
         print "The core_cs should be in cart_imp state, but it is not"
         exitError(3)
 
    print "Reset tools for both arms..."
    T_B_Wr = velma.getTf("B", "Wr")
    T_B_Wl = velma.getTf("B", "Wl")
    if not velma.moveCartImpRight([T_B_Wr], [0.1], [PyKDL.Frame()], [0.1], None, None, PyKDL.Wrench(PyKDL.Vector(5,5,5), PyKDL.Vector(5,5,5)), start_time=0.5):
         exitError(8)
    grip(velma,110)

    #MOVE TO CABINET
    print "cabinet right_door"  
    print velma.getTf("cabinet","right_door")
    f=velma.getTf("cabinet","right_door")
    rot=f.M
    yaw=rot.GetRPY()[2]
    print "yaw"
    print yaw

    while yaw<1.4:
        rospy.sleep(0.1)
        f=velma.getTf("cabinet","right_door")
        rot=f.M
        yaw=rot.GetRPY()[2]
        print "yaw"
        print yaw
        base_right_door = velma.getTf("B", "right_door")
        start_vector=base_right_door.M*PyKDL.Vector(0.39,-0.25,0)+base_right_door.p+PyKDL.Vector(0,0,0.07)
        
        start_f=velma.getTf("B", "Wr")
        start_rotation=start_f.M
        start_frame=PyKDL.Frame(start_rotation,start_vector)
        

        print "base door"
        print velma.getTf("B", "right_door")

        print "start frame"
        print start_frame

        print ("cabinet right_door")
        print velma.getTf("cabinet","right_door")
       
        wrist_grip=velma.getTf("Wr","Gr")

        
        print("staaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaart")
        twist=PyKDL.Twist(PyKDL.Vector(0.5,0.5,0.5),PyKDL.Vector(0.5,0.5,0.5))
        wr=PyKDL.Wrench(PyKDL.Vector(80,80,500), PyKDL.Vector(120,120,120))
        if not velma.moveCartImpRight([start_frame], [6.0], None, None,[wr], [3], PyKDL.Wrench(PyKDL.Vector(5,5,5), PyKDL.Vector(5,5,5)), start_time=0.5,path_tol=twist):
            exitError(13)
        if velma.waitForEffectorRight() != 0:
            exitError(14)
        rospy.sleep(0.1)   
        print("enddddddddddd staaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaart")
        
